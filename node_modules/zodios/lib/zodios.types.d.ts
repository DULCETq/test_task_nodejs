import { AxiosInstance, AxiosRequestConfig } from "axios";
import type { FilterArray, MapSchemaParameters, PickDefined, NeverIfEmpty, UndefinedToOptional, PathParamNames, SetPropsOptionalIfChildrenAreOptional, ReadonlyDeep, Merge } from "./utils.types";
import { z } from "zod";
export declare type Method = "get" | "post" | "put" | "delete" | "patch" | "head" | "options";
declare type MethodApiDescription<Api extends readonly unknown[], M extends Method> = FilterArray<Api, {
    method: M;
}>;
declare type EndpointApiDescription<Api extends readonly unknown[], M extends Method, Path> = FilterArray<Api, {
    method: M;
    path: Path;
}>;
export declare type Paths<Api extends readonly unknown[], M extends Method> = MethodApiDescription<Api, M>[number]["path"];
export declare type Response<Api extends readonly unknown[], M extends Method, Path> = z.infer<EndpointApiDescription<Api, M, Path>[number]["response"]>;
export declare type Body<Api extends readonly unknown[], M extends Method, Path> = z.infer<FilterArray<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Body";
}>[number]["schema"]>;
export declare type QueryParams<Api extends readonly unknown[], M extends Method, Path> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArray<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Query";
}>>>>;
export declare type PathParams<Path extends string> = NeverIfEmpty<Record<PathParamNames<Path>, string | number>>;
export declare type HeaderParams<Api extends readonly unknown[], M extends Method, Path> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArray<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Header";
}>>>>;
export declare type AnyZodiosMethodOptions = Merge<{
    params?: Record<string, unknown>;
    queries?: Record<string, unknown>;
    headers?: Record<string, string>;
}, Omit<AxiosRequestConfig, "params" | "headers" | "baseURL" | "url" | "method">>;
export declare type AnyZodiosRequestOptions = Merge<{
    method: Method;
    url: string;
}, AnyZodiosMethodOptions>;
export declare type ZodiosMethodOptions<Api extends readonly unknown[], M extends Method, Path extends string> = Merge<SetPropsOptionalIfChildrenAreOptional<PickDefined<{
    params: PathParams<Path>;
    queries: QueryParams<Api, M, Path>;
    headers: HeaderParams<Api, M, Path>;
}>>, Omit<AxiosRequestConfig, "params" | "headers" | "baseURL" | "data" | "method" | "url">>;
export declare type ZodiosRequestOptions<Api extends readonly unknown[], M extends Method, Path extends string> = Merge<{
    method: M;
    url: Path;
    data?: Body<Api, M, Path>;
}, ZodiosMethodOptions<Api, M, Path>>;
export declare type AxiosRetryRequestConfig = AxiosRequestConfig & {
    retried?: boolean;
};
/**
 * Token interface to allow zodios to inject a token into the request or renew it
 */
export interface TokenProvider {
    getToken: () => Promise<string>;
    renewToken?: () => Promise<void>;
}
/**
 * Zodios options
 */
export declare type ZodiosOptions = {
    /**
     * use the header api interceptor? Default: true
     */
    usePluginApi?: boolean;
    /**
     * Should zodios validate the response? Default: true
     */
    validateResponse?: boolean;
    /**
     * Override the default axios instance. Default: zodios will create it's own axios instance
     */
    axiosInstance?: AxiosInstance;
    /**
     * default config for axios requests
     */
    axiosConfig?: AxiosRequestConfig;
};
/**
 * Zodios enpoint definition that should be used to create a new instance of Zodios
 */
export declare type ZodiosEndpointDescription<R> = {
    method: Method;
    path: string;
    description?: string;
    parameters?: Array<{
        name: string;
        description?: string;
        type: "Query" | "Body" | "Header";
        schema: z.ZodType<unknown>;
    }>;
    response: z.ZodType<R>;
};
export declare type ZodiosEnpointDescriptions = ReadonlyDeep<ZodiosEndpointDescription<any>[]>;
export {};
