"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodiosHooks = void 0;
var react_query_1 = require("react-query");
var utils_1 = require("../utils");
var ZodiosHooks = /** @class */ (function () {
    function ZodiosHooks(apiName, zodios) {
        this.apiName = apiName;
        this.zodios = zodios;
    }
    ZodiosHooks.prototype.useQuery = function (path, config, queryOptions) {
        var _this = this;
        var params = (0, utils_1.pick)(config, [
            "params",
            "queries",
        ]);
        var keys = [this.apiName, path, params];
        var query = function () { return _this.zodios.get(path, config); };
        var queryClient = (0, react_query_1.useQueryClient)();
        var invalidate = function () { return queryClient.invalidateQueries(keys); };
        return __assign({ invalidate: invalidate }, (0, react_query_1.useQuery)(keys, query, queryOptions));
    };
    ZodiosHooks.prototype.useMutation = function (method, path, mutationOptions) {
        var _this = this;
        var mutation = function (_a) {
            var data = _a.data, config = _a.config;
            return _this.zodios.request(__assign(__assign({}, config), { method: method, url: path, data: data }));
        };
        return (0, react_query_1.useMutation)(mutation, mutationOptions);
    };
    ZodiosHooks.prototype.useGet = function (path, config, queryOptions) {
        return this.useQuery(path, config, queryOptions);
    };
    ZodiosHooks.prototype.usePost = function (path, mutationOptions) {
        return this.useMutation("post", path, mutationOptions);
    };
    ZodiosHooks.prototype.usePut = function (path, mutationOptions) {
        return this.useMutation("put", path, mutationOptions);
    };
    ZodiosHooks.prototype.usePatch = function (path, mutationOptions) {
        return this.useMutation("patch", path, mutationOptions);
    };
    ZodiosHooks.prototype.useDelete = function (path, mutationOptions) {
        return this.useMutation("delete", path, mutationOptions);
    };
    return ZodiosHooks;
}());
exports.ZodiosHooks = ZodiosHooks;
