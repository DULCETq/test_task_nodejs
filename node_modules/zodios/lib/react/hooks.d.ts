import { UseQueryOptions, UseMutationOptions } from "react-query";
import { Zodios } from "../zodios";
import { ZodiosEnpointDescriptions, Paths, ZodiosMethodOptions, Method, Response, Body } from "../zodios.types";
export declare class ZodiosHooks<Api extends ZodiosEnpointDescriptions> {
    private readonly apiName;
    private readonly zodios;
    constructor(apiName: string, zodios: Zodios<Api>);
    useQuery<Path extends Paths<Api, "get">>(path: Path, config?: ZodiosMethodOptions<Api, "get", Path>, queryOptions?: Omit<UseQueryOptions, "queryKey" | "queryFn">): {
        data: undefined;
        error: null;
        isError: false;
        isIdle: true;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "idle";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: undefined;
        error: unknown;
        isError: true;
        isIdle: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isIdle: false;
        isLoading: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "loading";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: Awaited<Response<Api, "get", Path>>;
        error: unknown;
        isError: true;
        isIdle: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: Awaited<Response<Api, "get", Path>>;
        error: null;
        isError: false;
        isIdle: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    };
    useMutation<M extends Method, Path extends Paths<Api, M>>(method: M, path: Path, mutationOptions?: UseMutationOptions): import("react-query").UseMutationResult<Awaited<Response<Api, M, Path>>, unknown, {
        data: Body<Api, M, Path>;
        config?: import("../utils.types").Simplify<import("../utils.types").Simplify<Pick<Partial<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>>, { [K in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_4>() => G_4 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K] ? 1 : 2 extends <G_5>() => G_5 extends { [P_9 in { [P_8 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_8] ? P_8 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_9]; } ? 1 : 2 ? K : never; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]> & Pick<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>, { [K_1 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_6>() => G_6 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1] ? 1 : 2 extends <G_7>() => G_7 extends { [P_11 in { [P_10 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_10] ? P_10 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: M;
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_11]; } ? 1 : 2 ? never : K_1; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: M;
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]>> & Omit<import("axios").AxiosRequestConfig<any>, "data" | "headers" | "method" | "url" | "baseURL" | "params">> | undefined;
    }, unknown>;
    useGet<Path extends Paths<Api, "get">>(path: Path, config?: ZodiosMethodOptions<Api, "get", Path>, queryOptions?: Omit<UseQueryOptions, "queryKey" | "queryFn">): {
        data: undefined;
        error: null;
        isError: false;
        isIdle: true;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "idle";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: undefined;
        error: unknown;
        isError: true;
        isIdle: false;
        isLoading: false;
        isLoadingError: true;
        isRefetchError: false;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: undefined;
        error: null;
        isError: false;
        isIdle: false;
        isLoading: true;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: false;
        status: "loading";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: Awaited<Response<Api, "get", Path>>;
        error: unknown;
        isError: true;
        isIdle: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: true;
        isSuccess: false;
        status: "error";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    } | {
        data: Awaited<Response<Api, "get", Path>>;
        error: null;
        isError: false;
        isIdle: false;
        isLoading: false;
        isLoadingError: false;
        isRefetchError: false;
        isSuccess: true;
        status: "success";
        dataUpdatedAt: number;
        errorUpdatedAt: number;
        failureCount: number;
        isFetched: boolean;
        isFetchedAfterMount: boolean;
        isFetching: boolean;
        isPlaceholderData: boolean;
        isPreviousData: boolean;
        isRefetching: boolean;
        isStale: boolean;
        refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Awaited<Response<Api, "get", Path>>, unknown>>;
        remove: () => void;
        invalidate: () => Promise<void>;
    };
    usePost<Path extends Paths<Api, "post">>(path: Path, mutationOptions?: UseMutationOptions): import("react-query").UseMutationResult<Awaited<Response<Api, "post", Path>>, unknown, {
        data: Body<Api, "post", Path>;
        config?: import("../utils.types").Simplify<import("../utils.types").Simplify<Pick<Partial<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>>, { [K in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_4>() => G_4 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K] ? 1 : 2 extends <G_5>() => G_5 extends { [P_9 in { [P_8 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_8] ? P_8 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_9]; } ? 1 : 2 ? K : never; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]> & Pick<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>, { [K_1 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_6>() => G_6 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1] ? 1 : 2 extends <G_7>() => G_7 extends { [P_11 in { [P_10 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_10] ? P_10 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "post";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_11]; } ? 1 : 2 ? never : K_1; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "post";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]>> & Omit<import("axios").AxiosRequestConfig<any>, "data" | "headers" | "method" | "url" | "baseURL" | "params">> | undefined;
    }, unknown>;
    usePut<Path extends Paths<Api, "put">>(path: Path, mutationOptions?: UseMutationOptions): import("react-query").UseMutationResult<Awaited<Response<Api, "put", Path>>, unknown, {
        data: Body<Api, "put", Path>;
        config?: import("../utils.types").Simplify<import("../utils.types").Simplify<Pick<Partial<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>>, { [K in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_4>() => G_4 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K] ? 1 : 2 extends <G_5>() => G_5 extends { [P_9 in { [P_8 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_8] ? P_8 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_9]; } ? 1 : 2 ? K : never; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]> & Pick<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>, { [K_1 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_6>() => G_6 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1] ? 1 : 2 extends <G_7>() => G_7 extends { [P_11 in { [P_10 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_10] ? P_10 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "put";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_11]; } ? 1 : 2 ? never : K_1; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "put";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]>> & Omit<import("axios").AxiosRequestConfig<any>, "data" | "headers" | "method" | "url" | "baseURL" | "params">> | undefined;
    }, unknown>;
    usePatch<Path extends Paths<Api, "patch">>(path: Path, mutationOptions?: UseMutationOptions): import("react-query").UseMutationResult<Awaited<Response<Api, "patch", Path>>, unknown, {
        data: Body<Api, "patch", Path>;
        config?: import("../utils.types").Simplify<import("../utils.types").Simplify<Pick<Partial<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>>, { [K in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_4>() => G_4 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K] ? 1 : 2 extends <G_5>() => G_5 extends { [P_9 in { [P_8 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_8] ? P_8 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_9]; } ? 1 : 2 ? K : never; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]> & Pick<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>, { [K_1 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_6>() => G_6 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1] ? 1 : 2 extends <G_7>() => G_7 extends { [P_11 in { [P_10 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_10] ? P_10 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "patch";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_11]; } ? 1 : 2 ? never : K_1; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "patch";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]>> & Omit<import("axios").AxiosRequestConfig<any>, "data" | "headers" | "method" | "url" | "baseURL" | "params">> | undefined;
    }, unknown>;
    useDelete<Path extends Paths<Api, "delete">>(path: Path, mutationOptions?: UseMutationOptions): import("react-query").UseMutationResult<Awaited<Response<Api, "delete", Path>>, unknown, {
        data: Body<Api, "delete", Path>;
        config?: import("../utils.types").Simplify<import("../utils.types").Simplify<Pick<Partial<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>>, { [K in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_4>() => G_4 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K] ? 1 : 2 extends <G_5>() => G_5 extends { [P_9 in { [P_8 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_8] ? P_8 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K][P_9]; } ? 1 : 2 ? K : never; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]> & Pick<import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>, { [K_1 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>]: <G_6>() => G_6 extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1] ? 1 : 2 extends <G_7>() => G_7 extends { [P_11 in { [P_10 in keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]-?: undefined extends import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_10] ? P_10 : never; }[keyof import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1]]]: import("../utils.types").PickDefined<{
            params: <G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>;
            queries: <G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Query";
            }, []>, {}>[P_3]; }>>;
            headers: <G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
                method: "delete";
                path: Path;
            }, []>[number]["parameters"], {
                type: "Header";
            }, []>, {}>[P_7]; }>>;
        }>[K_1][P_11]; } ? 1 : 2 ? never : K_1; }[((<G_3>() => G_3 extends import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_5 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>, { [P_4 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_4] ? P_4 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_5]; } & Partial<{ [P_7 in { [P_6 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_6] ? P_6 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Header";
        }, []>, {}>[P_7]; }>>) extends never ? never : "headers") | ((<G>() => G extends Record<import("../utils.types").PathParamNames<Path, never>, string | number> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : Record<import("../utils.types").PathParamNames<Path, never>, string | number>) extends never ? never : "params") | ((<G_2>() => G_2 extends import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>> ? 1 : 2 extends <G_1>() => G_1 extends {} ? 1 : 2 ? never : import("../utils.types").Simplify<{ [P_1 in Exclude<keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>, { [P in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P] ? P : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]>]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_1]; } & Partial<{ [P_3 in { [P_2 in keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]-?: undefined extends import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_2] ? P_2 : never; }[keyof import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>]]: import("../utils.types").MapSchemaParameters<import("../utils.types").FilterArray<import("../utils.types").FilterArray<Api, {
            method: "delete";
            path: Path;
        }, []>[number]["parameters"], {
            type: "Query";
        }, []>, {}>[P_3]; }>>) extends never ? never : "queries")]>> & Omit<import("axios").AxiosRequestConfig<any>, "data" | "headers" | "method" | "url" | "baseURL" | "params">> | undefined;
    }, unknown>;
}
