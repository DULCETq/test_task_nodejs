import { AxiosInstance } from "axios";
import { ZodiosRequestOptions, Body, Method, Paths, Response, ZodiosOptions, ZodiosEnpointDescriptions, ZodiosMethodOptions } from "./zodios.types";
/**
 * zodios api client based on axios
 */
export declare class Zodios<Api extends ZodiosEnpointDescriptions> {
    axiosInstance: AxiosInstance;
    options: ZodiosOptions;
    private api;
    /**
     * constructor
     * @param baseURL - the base url to use - if omited will use the browser domain
     * @param api - the description of all the api endpoints
     * @param options - the options to setup the client API
     * @example
     *   const apiClient = new Zodios("https://jsonplaceholder.typicode.com", [
     *     {
     *       method: "get",
     *       path: "/users",
     *       description: "Get all users",
     *       parameters: [
     *         {
     *           name: "q",
     *           type: "Query",
     *           schema: z.string(),
     *         },
     *         {
     *           name: "page",
     *           type: "Query",
     *           schema: z.string().optional(),
     *         },
     *       ],
     *       response: z.array(z.object({ id: z.number(), name: z.string() })),
     *     }
     *   ]);
     */
    constructor(api: Api, options?: ZodiosOptions);
    constructor(baseUrl: string, api: Api, options?: ZodiosOptions);
    constructor(api: Api, options?: ZodiosOptions);
    constructor(baseUrl: string, api: Api, options?: ZodiosOptions);
    get baseURL(): string | undefined;
    /**
     * get the underlying axios instance
     */
    get axios(): AxiosInstance;
    /**
     * use a plugin to cusomize the client
     * @param plugin - the plugin to use
     */
    use(plugin: ZodiosPlugin<Api>): void;
    private findEndpoint;
    private validateResponse;
    private replacePathParams;
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    request<M extends Method, Path extends Paths<Api, M>>(config: ZodiosRequestOptions<Api, M, Path>): Promise<Response<Api, M, Path>>;
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    get<Path extends Paths<Api, "get">>(path: Path, config?: ZodiosMethodOptions<Api, "get", Path>): Promise<Response<Api, "get", Path>>;
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    post<Path extends Paths<Api, "post">>(path: Path, data?: Body<Api, "post", Path>, config?: ZodiosMethodOptions<Api, "post", Path>): Promise<Response<Api, "post", Path>>;
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    put<Path extends Paths<Api, "put">>(path: Path, data?: Body<Api, "put", Path>, config?: ZodiosMethodOptions<Api, "put", Path>): Promise<Response<Api, "put", Path>>;
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    patch<Path extends Paths<Api, "patch">>(path: Path, data?: Body<Api, "patch", Path>, config?: ZodiosMethodOptions<Api, "patch", Path>): Promise<Response<Api, "patch", Path>>;
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    delete<Path extends Paths<Api, "delete">>(path: Path, data?: Body<Api, "patch", Path>, config?: ZodiosMethodOptions<Api, "delete", Path>): Promise<Response<Api, "delete", Path>>;
}
/**
 * Get the Api description type from zodios
 * @param Z - zodios type
 */
export declare type ApiOf<Z extends Zodios<any>> = Z extends Zodios<infer Api> ? Api : never;
/**
 * Get the Url string type from zodios
 * @param Z - zodios type
 */
/**
 * Zodios Plugin type
 * @Param URL - the url of the api
 * @Param Api - the api description type
 */
export declare type ZodiosPlugin<Api extends ZodiosEnpointDescriptions> = (zodios: Zodios<Api>) => void;
