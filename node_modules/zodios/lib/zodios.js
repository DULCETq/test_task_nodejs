"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zodios = void 0;
var axios_1 = __importDefault(require("axios"));
var api_1 = require("./plugins/api");
var utils_1 = require("./utils");
var paramsRegExp = /:([a-zA-Z_][a-zA-Z0-9_]*)/g;
/**
 * zodios api client based on axios
 */
var Zodios = /** @class */ (function () {
    function Zodios() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var baseURL;
        if (typeof args[0] === "string") {
            baseURL = args[0];
            args = args.slice(1);
        }
        this.api = args[0];
        this.options = __assign({ validateResponse: true, usePluginApi: true }, args[1]);
        if (this.options.axiosInstance) {
            this.axiosInstance = this.options.axiosInstance;
        }
        else {
            this.axiosInstance = axios_1.default.create(__assign({}, this.options.axiosConfig));
        }
        if (baseURL)
            this.axiosInstance.defaults.baseURL = baseURL;
        if (this.options.usePluginApi) {
            this.use((0, api_1.pluginApi)());
        }
    }
    Object.defineProperty(Zodios.prototype, "baseURL", {
        get: function () {
            return this.axiosInstance.defaults.baseURL;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Zodios.prototype, "axios", {
        /**
         * get the underlying axios instance
         */
        get: function () {
            return this.axiosInstance;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * use a plugin to cusomize the client
     * @param plugin - the plugin to use
     */
    Zodios.prototype.use = function (plugin) {
        plugin(this);
    };
    Zodios.prototype.findEndpoint = function (method, path) {
        return this.api.find(function (e) { return e.method === method && e.path === path; });
    };
    Zodios.prototype.validateResponse = function (endpoint, response) {
        return endpoint.response.parse(response);
    };
    Zodios.prototype.replacePathParams = function (config) {
        var result = config.url;
        var params = config.params;
        if (params) {
            result = result.replace(paramsRegExp, function (match, key) {
                return key in params ? "".concat(params[key]) : match;
            });
        }
        return result;
    };
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.request = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var conf, endpoint, requestConfig, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        conf = config;
                        endpoint = this.findEndpoint(config.method, config.url);
                        // istanbul ignore next
                        if (!endpoint) {
                            throw new Error("No endpoint found for ".concat(config.method, " ").concat(config.url));
                        }
                        requestConfig = __assign(__assign({}, (0, utils_1.omit)(conf, ["params", "queries"])), { url: this.replacePathParams(conf), params: conf.queries });
                        return [4 /*yield*/, this.axiosInstance.request(requestConfig)];
                    case 1:
                        response = _a.sent();
                        if (this.options.validateResponse) {
                            return [2 /*return*/, this.validateResponse(endpoint, response.data)];
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.get = function (path, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "get", url: path }))];
            });
        });
    };
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.post = function (path, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "post", url: path, data: data }))];
            });
        });
    };
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.put = function (path, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "put", url: path, data: data }))];
            });
        });
    };
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.patch = function (path, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "patch", url: path, data: data }))];
            });
        });
    };
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    Zodios.prototype.delete = function (path, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "delete", url: path, data: data }))];
            });
        });
    };
    return Zodios;
}());
exports.Zodios = Zodios;
